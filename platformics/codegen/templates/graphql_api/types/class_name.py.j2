"""
GraphQL type for {{cls.name}}

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/graphql_api/types/class_name.py.j2 instead.
"""

# ruff: noqa: E501 Line too long

{%- set type_map = {
    "uuid": "strawberry.ID",
    "string": "str",
    "Array2dFloat": "List[List[float]]",
    "List1dString": "List[str]",
    "integer": "int",
    "float": "float",
    "boolean": "bool",
    "date": "datetime.datetime",
} %}

{# Macro to print field description argument #}
{%- macro getDescription(attr, action) -%}
= strawberry.field(description={{ attr.description }}{%- if action == "Update" or attr.system_writable_only or not attr.required -%}, default=None{%- endif -%})
{%- endmacro %}

{# Macro for mutations to output X or Optional[X] #}
{% macro getTypeMutation(action, type, required) -%}
    {%- if action == "Create" and required -%}
      {{ type }}
    {%- else -%}
      Optional[{{ type }}]
    {%- endif -%}
{%- endmacro %}
{# Macro to generate comparators for types #}
{%- macro getComparators(field) -%}
  {%- if field.type == "uuid" -%}
    UUIDComparators
  {%- elif field.type == "string" -%}
    StrComparators
  {%- elif field.type == "Array2dFloat" -%}
    JSONB
  {%- elif field.type == "integer" -%}
    IntComparators
  {%- elif field.type == "float" -%}
    FloatComparators
  {%- elif field.is_enum -%}
    EnumComparators[{{ field.type }}]
  {%- elif field.type == "boolean" -%}
    BoolComparators
  {%- elif field.type == "date" -%}
    DatetimeComparators
  {%- elif field.is_entity -%}
    Annotated["{{ field.type }}WhereClause", strawberry.lazy("graphql_api.types.{{ field.related_class.snake_name }}")]
  {%- endif -%}
{%- endmacro %}

{# Macro to output "X" or "Optional[X]" #}
{% macro getType(type, required) -%}
    {%- if required %} {{ type }}
    {%- else %} Optional[{{ type }}]
    {%- endif %}
{%- endmacro %}

{# Macro to output a whole field definition for standard types #}
{% macro getFieldDef(attr) -%}
    {{ attr.name }}: {% if not attr.required -%}Optional[{%- endif -%}{{ type_map[attr.type] }}{%- if not attr.required -%}]{%- endif %} {{ getDescription(attr, "Create") }}
{%- endmacro %}
{# Macro to generate mutation input fields #}
{% macro getInputFields(action, fields) -%}
    {%- for attr in fields %}
        {%- if attr.type in type_map %}
    {{ attr.name }}: {{ getTypeMutation(action, type_map[attr.type], attr.required) }} {{ getDescription(attr, action) }}
        {%- elif attr.is_enum %}
    {{ attr.name }}: {{ getTypeMutation(action, attr.type, attr.required) }} {{ getDescription(attr, action) }}
        {%- elif attr.is_entity and not attr.is_virtual_relationship %} {# Don't include multivalued fields, only fields where we can update an ID #}
    {{ attr.name }}_id: {{ getTypeMutation(action, "strawberry.ID", attr.required) }} {{ getDescription(attr, action) }}
        {%- endif %}
    {%- endfor %}
{%- endmacro %}

{% set related_fields = cls.related_fields | unique(attribute='related_class.name') | list %}
{% set ignored_fields = [cls.name] %}

import typing
from typing import TYPE_CHECKING, Annotated, Any, Optional, Sequence, Callable, List

import platformics.database.models as base_db
from platformics.graphql_api.core.strawberry_helpers import get_aggregate_selections, get_nested_selected_fields
import database.models as db
import strawberry
import datetime
from platformics.graphql_api.core.query_builder import get_db_rows, get_aggregate_db_rows
{%- if cls.create_fields %}
from validators.{{cls.snake_name}} import {{cls.name}}CreateInputValidator
{%- endif %}
{%- if cls.mutable_fields %}
from validators.{{cls.snake_name}} import {{cls.name}}UpdateInputValidator
{%- endif %}
from graphql_api.helpers.{{ cls.snake_name }} import {{ cls.name }}GroupByOptions, build_{{ cls.snake_name }}_groupby_output
from platformics.graphql_api.core.relay_interface import EntityInterface
{%- for related_field in related_fields %}
    {%- if related_field.related_class.name not in ignored_fields and related_field.multivalued %}
from graphql_api.types.{{related_field.related_class.snake_name}} import ({{related_field.related_class.name}}Aggregate, format_{{related_field.related_class.snake_name}}_aggregate_output)
    {%- endif %}
{%- endfor %}
from fastapi import Depends
from platformics.graphql_api.core.errors import PlatformicsError
from platformics.graphql_api.core.deps import get_authz_client, get_db_session, require_auth_principal, is_system_user
from platformics.graphql_api.core.query_input_types import aggregator_map, orderBy, EnumComparators, DatetimeComparators, IntComparators, FloatComparators, StrComparators, UUIDComparators, BoolComparators
from platformics.graphql_api.core.strawberry_extensions import DependencyExtension
from platformics.security.authorization import AuthzAction, AuthzClient, Principal
from sqlalchemy import inspect
from sqlalchemy.engine.row import RowMapping
from sqlalchemy.ext.asyncio import AsyncSession
from strawberry import relay
from strawberry.types import Info
from support.limit_offset import LimitOffsetClause
from typing_extensions import TypedDict
import enum

{%- for field in cls.enum_fields %}
    {%- if loop.first %}
from support.enums import
    {%- endif %}
    {{- " " }}
    {{- field.type}}
    {{- "," if not loop.last else "" }}
{%- endfor %}


E = typing.TypeVar("E")
T = typing.TypeVar("T")

if TYPE_CHECKING:
    {%- for related_field in related_fields %}
        {%- if related_field.related_class.name not in ignored_fields %}
    from graphql_api.types.{{related_field.related_class.snake_name}} import ({{related_field.related_class.name}}OrderByClause, {{related_field.related_class.name}}AggregateWhereClause, {{related_field.related_class.name}}WhereClause, {{related_field.related_class.name}})
        {%- endif %}
    {%- endfor %}
    pass
else:
    {%- for related_field in related_fields %}
        {%- if related_field.related_class.name not in ignored_fields %}
    {{related_field.related_class.name}}WhereClause = "{{related_field.related_class.name}}WhereClause"
    {{related_field.related_class.name}}AggregateWhereClause = "{{related_field.related_class.name}}AggregateWhereClause"
    {{related_field.related_class.name}} = "{{related_field.related_class.name}}"
    {{related_field.related_class.name}}OrderByClause = "{{related_field.related_class.name}}OrderByClause"
        {%- endif %}
    {%- endfor %}
    pass


"""
------------------------------------------------------------------------------
Dataloaders
------------------------------------------------------------------------------
These are batching functions for loading related objects to avoid N+1 queries.
"""

{%- for related_field in related_fields %}
    {%- if related_field.is_entity and related_field.related_class.name not in ignored_fields %}
        {%- if related_field.multivalued %}
@relay.connection(
        relay.ListConnection[Annotated["{{ related_field.type }}", strawberry.lazy("graphql_api.types.{{ related_field.related_class.snake_name }}")]]  # type:ignore
)
async def load_{{ related_field.related_class.snake_name }}_rows(
    root: "{{ cls.name }}",
    info: Info,
    where: Annotated["{{ related_field.type }}WhereClause", strawberry.lazy("graphql_api.types.{{ related_field.related_class.snake_name }}")] | None = None,
    order_by: Optional[list[Annotated["{{ related_field.type }}OrderByClause", strawberry.lazy("graphql_api.types.{{ related_field.related_class.snake_name }}")]]] = [],
) -> Sequence[Annotated["{{ related_field.type }}", strawberry.lazy("graphql_api.types.{{ related_field.related_class.snake_name }}")]]:
        {%- else %}
@strawberry.field
async def load_{{ related_field.related_class.snake_name }}_rows(
    root: "{{ cls.name }}",
    info: Info,
    where: Annotated["{{ related_field.type }}WhereClause", strawberry.lazy("graphql_api.types.{{ related_field.related_class.snake_name }}")] | None = None,
    order_by: Optional[list[Annotated["{{ related_field.type }}OrderByClause", strawberry.lazy("graphql_api.types.{{ related_field.related_class.snake_name }}")]]] = [],
) -> Optional[Annotated["{{ related_field.type }}", strawberry.lazy("graphql_api.types.{{ related_field.related_class.snake_name }}")]]:
        {%- endif %}
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.{{ cls.name }})
        {%- if related_field.multivalued %}
    relationship = mapper.relationships["{{ related_field.name }}"]
    return await dataloader.loader_for(relationship, where, order_by).load(root.id)  # type:ignore
        {%- else %}
            {%- if related_field.is_virtual_relationship %}
    relationship = mapper.relationships["{{ related_field.name }}"]
    return await dataloader.loader_for(relationship, where).load(root.id) # type:ignore
            {%- else %}
    relationship = mapper.relationships["{{ related_field.name }}"]
    return await dataloader.loader_for(relationship, where, order_by).load(root.{{ related_field.name }}_id) # type:ignore
            {%- endif %}
        {%- endif %}


        {%- if related_field.multivalued %}
@strawberry.field
async def load_{{ related_field.related_class.snake_name }}_aggregate_rows(
    root: "{{ cls.name }}",
    info: Info,
    where: Annotated["{{ related_field.type }}WhereClause", strawberry.lazy("graphql_api.types.{{ related_field.related_class.snake_name }}")] | None = None,
) -> Optional[Annotated["{{ related_field.related_class.name }}Aggregate", strawberry.lazy("graphql_api.types.{{ related_field.related_class.snake_name }}")]]:
    selections = get_nested_selected_fields(info.selected_fields)
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.{{ cls.name }})
    relationship = mapper.relationships["{{ related_field.name }}"]
    rows = await dataloader.aggregate_loader_for(relationship, where, selections).load(root.id)  # type:ignore
    aggregate_output = format_{{ related_field.related_class.snake_name }}_aggregate_output(rows)
    return aggregate_output
        {%- endif %}

    {%- endif %}
{%- endfor %}


"""
------------------------------------------------------------------------------
Define Strawberry GQL types
------------------------------------------------------------------------------
"""

"""
Only let users specify IDs in WHERE clause when mutating data (for safety).
We can extend that list as we gather more use cases from the FE team.
"""
@strawberry.input
class {{ cls.name }}WhereClauseMutations(TypedDict):
    {%- for attr in cls.visible_fields %}
        {%- if attr.identifier %}
    {{ attr.name }}: {{ getComparators(attr) }} | None
        {%- endif %}
    {%- endfor %}


"""
Supported WHERE clause attributes
"""
@strawberry.input
class {{ cls.name }}WhereClause(TypedDict):
    {%- for attr in cls.visible_fields %}
        {%- if attr.type == cls.name %}
    {{ attr.name }}_id: Optional[{{ getComparators(attr.related_class.identifier) }}] | None
        {%- elif attr.type in ["Array2dFloat", "List1dString"] %}
        {%- else %}
    {{ attr.name }}: Optional[{{ getComparators(attr) }}] | None
        {%- endif %}
        {%- if attr.is_entity and not attr.multivalued %}
    {{ attr.name }}_id : Optional[{{ getComparators(attr.related_class.identifier) }}] | None
        {%- endif %}
        {%- if attr.is_virtual_relationship %}
    {{ attr.name }}_aggregate : Optional[Annotated["{{ attr.type }}AggregateWhereClause", strawberry.lazy("graphql_api.types.{{ attr.related_class.snake_name }}")]] | None
        {%- endif %}
    {%- endfor %}

"""
Supported ORDER BY clause attributes
"""
@strawberry.input
class {{ cls.name }}OrderByClause(TypedDict):
    {%- for attr in cls.visible_fields %}
        {%- if not attr.multivalued %}
            {%- if attr.is_entity %}
    {{ attr.name }}: Optional[Annotated["{{ attr.type }}OrderByClause", strawberry.lazy("graphql_api.types.{{ attr.related_class.snake_name }}")]] | None
            {%- else %}
    {{ attr.name }}: Optional[orderBy] | None
            {%- endif %}
        {%- endif %}
    {%- endfor %}


"""
Define {{ cls.name }} type
"""
@strawberry.type(description={{ cls.description }})
class {{ cls.name }}(EntityInterface):
    {%- for attr in cls.visible_fields %}
        {%- if attr.is_enum %}
    {{ attr.name }}: {{ getType(attr.type, attr.required) }} {{ getDescription(attr, "Create") }}
        {%- elif attr.type == cls.name %}
    {{ attr.name }}_id: Optional[strawberry.ID]
        {%- elif attr.is_entity %}
    {{ attr.name }}: {{ "Sequence" if attr.multivalued else "Optional" }}[Annotated["{{ attr.type }}", strawberry.lazy("graphql_api.types.{{ attr.related_class.snake_name }}")]] = load_{{ attr.related_class.snake_name }}_rows  # type:ignore
            {%- if attr.multivalued %}
    {{ attr.name }}_aggregate : Optional[Annotated["{{ attr.related_class.name }}Aggregate", strawberry.lazy("graphql_api.types.{{ attr.related_class.snake_name }}")]] = load_{{ attr.related_class.snake_name }}_aggregate_rows  # type:ignore
            {%- else %}
    {{ attr.name }}_id : {{ getType(type_map[attr.related_class.identifier.type], attr.required) }}
            {%- endif %}
        {%- else %}
    {{ getFieldDef(attr) }}
        {%- endif %}
    {%- endfor %}

"""
We need to add this to each Queryable type so that strawberry will accept either our
Strawberry type *or* a SQLAlchemy model instance as a valid response class from a resolver
"""
{{ cls.name }}.__strawberry_definition__.is_type_of = (  # type: ignore
    lambda obj, info: type(obj) == db.{{ cls.name }} or type(obj) == {{ cls.name }}
)

"""
------------------------------------------------------------------------------
Aggregation types
------------------------------------------------------------------------------
"""

{%- if cls.numeric_fields %}
"""
Define columns that support numerical aggregations
"""
@strawberry.type
class {{ cls.name }}NumericalColumns:
    {%- for attr in cls.numeric_fields %}
        {%- if attr.type == "integer" %}
    {{ attr.name }}: {{ getType("int", False) }} = None
        {%- elif attr.type == "float" %}
    {{ attr.name }}: {{ getType("float", False) }} = None
        {%- endif %}
    {%- endfor %}
{%- endif %}

"""
Define columns that support min/max aggregations
"""
@strawberry.type
class {{ cls.name }}MinMaxColumns:
    {%- for attr in cls.visible_fields %}
        {%- if attr.type == "integer" %}
    {{ attr.name }}: {{ getType("int", False) }} = None
        {%- elif attr.type == "float" %}
    {{ attr.name }}: {{ getType("float", False) }} = None
        {%- elif attr.type == "string" %}
    {{ attr.name }}: {{ getType("str", False) }} = None
        {%- elif attr.type == "date" %}
    {{ attr.name }}: {{ getType("datetime.datetime", False) }} = None
        {%- endif %}
    {%- endfor %}

"""
Define enum of all columns to support count and count(distinct) aggregations
"""
@strawberry.enum
class {{ cls.name }}CountColumns(enum.Enum):
    {%- for attr in cls.visible_fields %}
        {%- if not attr.is_entity %}
    {{ attr.camel_name }} = "{{ attr.name }}"
        {%- endif %}
    {%- endfor %}

"""
Support *filtering* on aggregates and related aggregates
"""
@strawberry.input
class {{ cls.name }}AggregateWhereClauseCount(TypedDict):
    arguments: Optional["{{ cls.name }}CountColumns"] | None
    distinct: Optional[bool] | None
    filter: Optional[{{ cls.name }}WhereClause] | None
    predicate: Optional[IntComparators] | None


@strawberry.input
class {{ cls.name }}AggregateWhereClause(TypedDict):
    count: {{ cls.name }}AggregateWhereClauseCount

"""
All supported aggregation functions
"""
@strawberry.type
class {{ cls.name }}AggregateFunctions:
    # This is a hack to accept "distinct" and "columns" as arguments to "count"
    @strawberry.field
    def count(self, distinct: Optional[bool] = False, columns: Optional[{{ cls.name }}CountColumns] = None) -> Optional[int]:
        # Count gets set with the proper value in the resolver, so we just return it here
        return self.count # type: ignore
    {%- if cls.numeric_fields %}
    sum: Optional[{{ cls.name }}NumericalColumns] = None
    avg: Optional[{{ cls.name }}NumericalColumns] = None
    stddev: Optional[{{ cls.name }}NumericalColumns] = None
    variance: Optional[{{ cls.name }}NumericalColumns] = None
    {%- endif %}
    min: Optional[{{ cls.name }}MinMaxColumns] = None
    max: Optional[{{ cls.name }}MinMaxColumns] = None
    groupBy: Optional[{{ cls.name }}GroupByOptions] = None

"""
Wrapper around {{ cls.name }}AggregateFunctions
"""
@strawberry.type
class {{ cls.name }}Aggregate:
    aggregate: Optional[list[{{ cls.name }}AggregateFunctions]] = None

"""
------------------------------------------------------------------------------
Mutation types
------------------------------------------------------------------------------
"""

{# Generate Create and Update Strawberry input types #}
{%- if cls.create_fields %}
@strawberry.input()
class {{ cls.name }}CreateInput:
    {{- getInputFields("Create", cls.create_fields) }}
{%- endif %}

{%- if cls.mutable_fields %}
@strawberry.input()
class {{ cls.name }}UpdateInput:
    {{- getInputFields("Update", cls.mutable_fields) }}
{%- endif %}

"""
------------------------------------------------------------------------------
Utilities
------------------------------------------------------------------------------
"""

@strawberry.field(extensions=[DependencyExtension()])
async def resolve_{{ cls.plural_snake_name }}(
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[{{ cls.name }}WhereClause] = None,
    order_by: Optional[list[{{ cls.name }}OrderByClause]] = [],
    limit_offset: Optional[LimitOffsetClause] = None,
) -> typing.Sequence[{{ cls.name }}]:
    """
    Resolve {{ cls.name }} objects. Used for queries (see graphql_api/queries.py).
    """
    limit = limit_offset["limit"] if limit_offset and "limit" in limit_offset else None
    offset = limit_offset["offset"] if limit_offset and "offset" in limit_offset else None
    if offset and not limit:
        raise PlatformicsError("Cannot use offset without limit")
    return await get_db_rows(db.{{ cls.name }}, session, authz_client, principal, where, order_by, AuthzAction.VIEW, limit, offset)  # type: ignore


def format_{{ cls.snake_name }}_aggregate_output(query_results: Sequence[RowMapping] | RowMapping) -> {{ cls.name }}Aggregate:
    """
    Given a row from the DB containing the results of an aggregate query,
    format the results using the proper GraphQL types.
    """
    aggregate = []
    if not type(query_results) is list:
        query_results = [query_results] # type: ignore
    for row in query_results:
        aggregate.append(format_{{ cls.snake_name }}_aggregate_row(row))
    return {{ cls.name }}Aggregate(aggregate=aggregate)

def format_{{ cls.snake_name }}_aggregate_row(row: RowMapping) -> {{ cls.name }}AggregateFunctions:
    """
    Given a single row from the DB containing the results of an aggregate query,
    format the results using the proper GraphQL types.
    """
    output = {{ cls.name }}AggregateFunctions()
    for key, value in row.items():
        # Key is either an aggregate function or a groupby key
        group_keys = key.split(".")
        aggregate = key.split("_", 1)
        if aggregate[0] not in aggregator_map.keys():
            # Turn list of groupby keys into nested objects
            if not getattr(output, "groupBy"):
                setattr(output, "groupBy", {{ cls.name }}GroupByOptions())
            group = build_{{ cls.snake_name }}_groupby_output(getattr(output, "groupBy"), group_keys, value)
            setattr(output, "groupBy", group)
        else:
            aggregate_name = aggregate[0]
            if aggregate_name == "count":
                output.count = value
            else:
                aggregator_fn, col_name = aggregate[0], aggregate[1]
                if not getattr(output, aggregator_fn):
                    if aggregate_name in ["min", "max"]:
                        setattr(output, aggregator_fn, {{ cls.name }}MinMaxColumns())
                   {%- if cls.numeric_fields %}
                    else:
                        setattr(output, aggregator_fn, {{ cls.name }}NumericalColumns())
                   {%- endif %}
                setattr(getattr(output, aggregator_fn), col_name, value)
    return output

@strawberry.field(extensions=[DependencyExtension()])
async def resolve_{{ cls.plural_snake_name }}_aggregate(
    info: Info,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[{{ cls.name }}WhereClause] = None,
    # TODO: add support for groupby, limit/offset
) -> {{ cls.name }}Aggregate:
    """
    Aggregate values for {{ cls.name }} objects. Used for queries (see graphql_api/queries.py).
    """
    # Get the selected aggregate functions and columns to operate on, and groupby options if any were provided.
    # TODO: not sure why selected_fields is a list
    aggregate_selections, groupby_selections = get_aggregate_selections(info.selected_fields)

    if not aggregate_selections:
        raise PlatformicsError("No aggregate functions selected")

    rows = await get_aggregate_db_rows(db.{{ cls.name }}, session, authz_client, principal, where, aggregate_selections, [], groupby_selections)  # type: ignore
    aggregate_output = format_{{ cls.snake_name }}_aggregate_output(rows)
    return aggregate_output

{%- if cls.create_fields %}
@strawberry.mutation(extensions=[DependencyExtension()])
async def create_{{ cls.snake_name }}(
    input: {{ cls.name }}CreateInput,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
    is_system_user: bool = Depends(is_system_user),
) -> db.{{ cls.name }}:
    """
    Create a new {{ cls.name }} object. Used for mutations (see graphql_api/mutations.py).
    """
    validated = {{cls.name}}CreateInputValidator(**input.__dict__)
    params = validated.model_dump()

    # Validate that the user can read all of the entities they're linking to.
    {%- if cls.system_only_create_fields %}
    # If we have any system_writable fields present, make sure that our auth'd user *is* a system user
    if not is_system_user:
        {%- if not cls.user_create_fields %}
        raise PlatformicsError("Unauthorized: {{cls.name}} is not creatable")
        {%- else %}
            {%- for field in cls.system_only_create_fields %}
	    params.pop("{{field.name}}", None)
            {%- endfor %}
        {%- endif %}
    {%- endif %}

    # Validate that the user can read all of the entities they're linking to.
    {%- for field in cls.create_fields %}
        {%- if field.is_entity and not field.is_virtual_relationship %}
    # Check that {{field.name}} relationship is accessible.
    if validated.{{field.name}}_id:
        {{field.name}} = await get_db_rows(db.{{ field.related_class.name }}, session, authz_client, principal, {"id": {"_eq": validated.{{field.name}}_id } }, [], AuthzAction.VIEW)
        if not {{field.name}}:
            raise PlatformicsError("Unauthorized: {{field.name}} does not exist")
        {%- endif %}
    {%- endfor %}

    # Save to DB
    params["owner_user_id"] = int(principal.id)
    new_entity = db.{{ cls.name }}(**params)

    # Are we actually allowed to create this entity?
    if not authz_client.can_create(new_entity, principal):
        raise PlatformicsError("Unauthorized: Cannot create entity")

    session.add(new_entity)
    await session.commit()
    return new_entity
{%- endif %}


{%- if cls.mutable_fields %}
@strawberry.mutation(extensions=[DependencyExtension()])
async def update_{{ cls.snake_name }}(
    input: {{ cls.name }}UpdateInput,
    where: {{ cls.name }}WhereClauseMutations,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
    is_system_user: bool = Depends(is_system_user),
) -> Sequence[db.{{ cls.name }}]:
    """
    Update {{ cls.name }} objects. Used for mutations (see graphql_api/mutations.py).
    """
    validated = {{cls.name}}UpdateInputValidator(**input.__dict__)
    params = validated.model_dump()

    # Need at least one thing to update
    num_params = len([x for x in params if params[x] is not None])
    if num_params == 0:
        raise PlatformicsError("No fields to update")

    # Validate that the user can read all of the entities they're linking to.
    {%- for field in cls.mutable_fields %}
        {%- if field.is_entity and not field.is_virtual_relationship %}
    # Check that {{field.name}} relationship is accessible.
    if validated.{{field.name}}_id:
        {{field.name}} = await get_db_rows(db.{{ field.related_class.name }}, session, authz_client, principal, {"id": {"_eq": validated.{{field.name}}_id } }, [], AuthzAction.VIEW)
        if not {{field.name}}:
            raise PlatformicsError("Unauthorized: {{field.name}} does not exist")
            {%- if field.type != cls.name %}
        params["{{field.name}}"] = {{field.name}}[0]
        del params["{{field.name}}_id"]
            {%- endif %}
        {%- endif %}
    {%- endfor %}

    {%- if cls.system_only_mutable_fields %}
    # If we have any system_writable fields present, make sure that our auth'd user *is* a system user
    if not is_system_user:
        {%- if not cls.user_mutable_fields %}
        raise PlatformicsError("Unauthorized: {{cls.name}} is not mutable")
        {%- else %}
            {%- for field in cls.system_only_mutable_fields %}
        params.pop("{{field.name}}", None)
            {%- endfor %}
        {%- endif %}
    {%- endif %}

    # Fetch entities for update, if we have access to them
    entities = await get_db_rows(db.{{ cls.name }}, session, authz_client, principal, where, [], AuthzAction.UPDATE)
    if len(entities) == 0:
        raise PlatformicsError("Unauthorized: Cannot update entities")

    # Update DB
    updated_at = datetime.datetime.now()
    for entity in entities:
        entity.updated_at = updated_at
        for key in params:
            if params[key] is not None:
                setattr(entity, key, params[key])

    if not authz_client.can_update(entity, principal):
        raise PlatformicsError("Unauthorized: Cannot access new collection")

    await session.commit()
    return entities
{%- endif %}


@strawberry.mutation(extensions=[DependencyExtension()])
async def delete_{{ cls.snake_name }}(
    where: {{ cls.name }}WhereClauseMutations,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
) -> Sequence[db.{{ cls.name }}]:
    """
    Delete {{ cls.name }} objects. Used for mutations (see graphql_api/mutations.py).
    """
    # Fetch entities for deletion, if we have access to them
    entities = await get_db_rows(db.{{ cls.name }}, session, authz_client, principal, where, [], AuthzAction.DELETE)
    if len(entities) == 0:
        raise PlatformicsError("Unauthorized: Cannot delete entities")

    # Update DB
    for entity in entities:
        await session.delete(entity)
    await session.commit()
    return entities
