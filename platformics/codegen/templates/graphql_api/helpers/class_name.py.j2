"""
Define GraphQL types and helper functions for supporting GROUPBY queries.
"""
{% set related_fields = cls.related_fields | unique(attribute='related_class.name') | list %}
{% set ignored_fields = [cls.name] %}

from typing import Any, Optional, TYPE_CHECKING, Annotated
import strawberry
import datetime
import uuid

{%- for field in cls.enum_fields %}
    {%- if loop.first %}
from support.enums import
    {%- endif %}
    {{- " " }}
    {{- field.type}}
    {{- "," if not loop.last else "" }}
{%- endfor %}

{%- for field in cls.related_fields %}
    {%- if field.related_class.name not in ignored_fields %}
import graphql_api.helpers.{{ field.related_class.snake_name }} as {{ field.related_class.snake_name }}_helper
    {%- endif %}
{%- endfor %}

{%- if cls.related_fields | length >= 1 %}
if TYPE_CHECKING:
{%- for field in cls.related_fields %}
    {%- if field.related_class.name not in ignored_fields %}
    from graphql_api.helpers.{{ field.related_class.snake_name }} import {{ field.related_class.name }}GroupByOptions
    {%- endif %}
{%- endfor %}
else:
{%- for field in cls.related_fields %}
    {%- if field.related_class.name not in ignored_fields %}
    {{ field.related_class.name }}GroupByOptions = "{{ field.related_class.name }}GroupByOptions"
    {%- endif %}
{%- endfor %}
{%- endif %}


"""
Define groupby options for {{ cls.name }} type.
These are only used in aggregate queries.
"""

@strawberry.type
class {{ cls.name }}GroupByOptions:
{%- for attr in cls.visible_fields %}
    {%- if attr.is_entity %}
    {{ attr.name }}: Optional[Annotated["{{ attr.related_class.name }}GroupByOptions", strawberry.lazy("graphql_api.helpers.{{ attr.related_class.snake_name }}")]] = None
    {%- elif attr.type == cls.name %}
    {{ attr.name }}: Optional["{{attr.related_class.snake_name}}_helper.{{ cls.name }}GroupByOptions"] = None
    {%- else %}
        {%- if attr.type == "string" %}
    {{ attr.name }}: Optional[str] = None
        {%- elif attr.type == "integer" %}
    {{ attr.name }}: Optional[int] = None
        {%- elif attr.type == "date" %}
    {{ attr.name }}: Optional[datetime.datetime] = None
        {%- elif attr.type == "boolean" %}
    {{ attr.name }}: Optional[bool] = None
        {%- elif attr.type == "uuid" %}
    {{ attr.name }}: Optional[uuid.UUID] = None
        {%- elif attr.type == "Array2dFloat" %}
    {{ attr.name }}: Optional[list[list[float]]] = None
        {%- elif attr.type == "List1dString" %}
    {{ attr.name }}: Optional[list[str]] = None
        {%- else %}
    {{ attr.name }}: Optional[{{ attr.type }}] = None
        {%- endif %}
    {%- endif %}
{%- endfor %}


def build_{{ cls.snake_name }}_groupby_output(
    group_object: Optional[{{ cls.name }}GroupByOptions],
    keys: list[str],
    value: Any,
) -> {{ cls.name }}GroupByOptions:
    """
    Given a list of (potentially nested) fields representing the key of a groupby query and the value,
    build the proper groupby object.
    """
    if not group_object:
        group_object = {{ cls.name }}GroupByOptions()

    key = keys.pop(0)
    match key:
{%- for attr in cls.visible_fields %}
    {%- if attr.is_entity %}
        case "{{ attr.name }}":
            if getattr(group_object, key):
                value = {{ attr.related_class.snake_name }}_helper.build_{{ attr.related_class.snake_name }}_groupby_output(
                    getattr(group_object, key),
                    keys,
                    value,
                )
            else:
                value = {{ attr.related_class.snake_name }}_helper.build_{{ attr.related_class.snake_name }}_groupby_output(
                    None,
                    keys,
                    value,
                )
    {%- endif %}
{%- endfor %}
        case _:
            pass
    setattr(group_object, key, value)
    return group_object
