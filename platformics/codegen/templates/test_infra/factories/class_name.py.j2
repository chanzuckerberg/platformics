"""
Factory for generating {{ cls.name }} objects.
"""

# ruff: noqa: E501 Line too long

import random
import factory
import uuid6
from database.models import {{ cls.name }}
from platformics.test_infra.factories.base import CommonFactory
{%- for field in cls.related_fields %}
    {%- if field.is_entity and not field.multivalued%}
from test_infra.factories.{{ field.related_class.snake_name }} import {{ field.related_class.name }}Factory
    {%- endif %}
{%- endfor %}
from factory import Faker, fuzzy
from faker_biology.bioseq import Bioseq
from faker_biology.physiology import Organ
from faker_enum import EnumProvider
{%- if cls.is_a %}
from test_infra.factories.{{cls.is_a_snake}} import {{cls.is_a}}Factory
{%- endif %}

Faker.add_provider(Bioseq)
Faker.add_provider(Organ)
Faker.add_provider(EnumProvider)


class {{ cls.name }}Factory(CommonFactory):
    class Meta:
        sqlalchemy_session = None  # workaround for a bug in factoryboy
        model = {{ cls.name }}
        {% if cls.is_a %}
        # Match entity_id with existing db rows to determine whether we should
        # create a new row or not.
        sqlalchemy_get_or_create = ("{{ cls.parent_key.name }}",)
        {% else %}
        sqlalchemy_get_or_create = ("{{ cls.identifier.name }}",)
        {% endif %}
    {% for field in cls.all_fields %}
        {#- Type designators should *not* have random values assigned by fixtures! #}
        {%- if field.type_designator %}
          {%- continue %}
        {%- endif %}
        {%- if field.type == "uuid" %}
            {% if field.identifier %}
              {%- if field.name == cls.identifier.name %}
    {{ field.name }} = factory.Faker("uuid4")
              {%- else %}
    {{ field.name }} = factory.SelfAttribute("{{ cls.identifier.name }}")
              {%- endif %}
            {% endif %}
        {%- else %}
            {%- if field.is_entity %}
            {#- If the field is a one-to-one relationship, avoid circular imports by only defining the SubFactory on the child #}
                {%- if not field.multivalued %}
    {{ field.name }} = factory.SubFactory(
        {{ field.related_class.name }}Factory,
    )
                {%- endif %}
            {%- elif field.is_enum %}
    {{ field.name }} = fuzzy.FuzzyChoice([
        {%- for value in field.related_enum.permissible_values %}
        "{{ value }}"
        {{- ", " if not loop.last else "" }}
        {%- endfor %}
    ])
            {%- else %}
                {#- If the schema specifies what factory type to use for the field, use that. #}
                {#- Otherwise, try to infer a reasonable default based on the field's type.}} #}
                {%- if field.factory_type is not none %}
    {{ field.name }} = factory.Faker("{{ field.factory_type }}")
                {%- elif field.type == "string" %}
    {{ field.name }} = fuzzy.FuzzyText()
                {%- elif field.type == "Array2dFloat" %}
    {{ field.name }} = factory.LazyAttribute(lambda o: [ [random.uniform(1, 100) for _ in range(5)] ] * random.randint(2, 5) )
                {%- elif field.type == "List1dString" %}
    {{ field.name }} = factory.LazyAttribute(lambda o: [ factory.Faker("word").evaluate(o, None, {"locale": "en"}) for _ in range(random.randint(2, 5)) ])
                {%- elif field.type == "integer" %}
                    {% if field.identifier %}
    # Auto increment integer identifiers starting with 1
    {{ field.name }} = factory.Sequence(lambda n: n + 1)
                    {% else %}
    {{ field.name }} = fuzzy.FuzzyInteger(1, 1000)
                    {% endif %}
                {%- elif field.type == "float" %}
    {{ field.name }} = fuzzy.FuzzyFloat(1, 100)
                {%- elif field.type == cls.name %}{#
    FIXME: Self-references don't work, even with the fixes proposed in https://github.com/FactoryBoy/factory_boy/issues/173:
    # {{ field.name }} = factory.LazyAttribute(lambda x: {{ field.related_class.name }}Factory({{ field.name }}=None))
    # {{ field.name }} = factory.SubFactory("test_infra.factories.{{ cls.snake_name }}.{{ field.related_class.name }}Factory", #{{ field.name }}=None) #}
    {{ field.name }} = None
                {%- else %}
    {{ field.name }} = factory.Faker("{{ field.type }}")
                {%- endif %}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
