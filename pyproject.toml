[tool.poetry]
name = "platformics"
# placeholder version that will be replace by poetry-dynamic-versioning
version = "0.1.1" 
description = "Codegen Python GraphQL Entity Framework"
authors = ["CZI Team <opensource@chanzuckerberg.com>"]
license = "MIT License"
readme = "README.md"
packages = [{include = "platformics"}]
keywords = ["graphql", "codegen"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Code Generators",
    "Programming Language :: Python :: 3.12",
]
repository = "https://github.com/chanzuckerberg/platformics"

[tool.poetry.scripts]
platformics = 'platformics.cli.main:cli'

[tool.poetry.dev-dependencies]
black = "^24.4.0"
uvicorn = "^0.23.1"
gunicorn = "^22.0.0"
pytest = "^7.4.0"
pytest-postgresql = "^5.0.0"
factory-boy = "^3.3.0"
pytest-asyncio = "^0.21.1"
mypy = "^1.5.1"
moto = "^4.2.3"
ruff = "^0.0.278"
isort = "^5.12.0"
faker-enum = "^0.0.2"
faker-biology = "^0.6.0"
httpx = "^0.24.1"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.110.0"
biopython = "^1.84"
asyncpg = "^0.28.0"
alembic = "^1.11.1"
sgqlc = "^16.3"
psycopg-binary = "^3.1.9"
cerbos = "^0.10.0"
pydantic = "^2.1.1"
pydantic-settings = "^2.0.2"
jwcrypto = "^1.5.6"
uuid6 = "^2023.5.2"
types-requests = "^2.31.0.2"
boto3 = "^1.28.43"
boto3-stubs = {extras = ["s3", "sts"], version = "^1.28.61"}
jinja2 = "^3.1.3"
linkml = "^1.5.7"
strcase = "^1.0.0"
linkml-runtime = "^1.6.0"
sqlalchemy_utils = "^0.41.1"
strawberry-graphql = "^0.217.0"

[build-system]
requires = ["poetry-core", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
# a wrapper for poetry.core.masonry.api
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"

[tool.black]
line-length = 120

[tool.mypy]
show_error_codes = true
warn_unreachable = true
explicit_package_bases = true
ignore_missing_imports = true
exclude = [
  "platformics/graphql_api/relay",
  "platformics/thirdparty"
]
# We'd like to turn this on soon but we're not there yet.
# disallow_untyped_defs = true

# do not look at shopify and turn anything originating from it into Any
[[tool.mypy.overrides]]
module = ["platformics.graphql_api.relay.*"]
follow_imports = "skip"

[[tool.mypy.overrides]]
module = ["platformics.thirdparty.*"]
follow_imports = "skip"

[tool.ruff]
# Same as Black.
line-length = 120

# Assume Python 3.12.
target-version = "py312"

[tool.ruff.lint]
select = [
    "E", "W",  # pycodestyle
    "F",  # pyflakes
    "B",  # bugbear
    "I",  # isort
    "N",  # pep8-naming
    "ASYNC",  # async
    "COM",  # commas
    "C4",  # comprehensions
    "DTZ",  # datetimez
    "ISC",  # implicit-str-concat
    "G",  # logging-format
    "T20",  # print
    "SIM",  # simplify
]
ignore = [
    "E501",  # line too long
    "C408",  # rewrite empty built-ins as literals
    "T201",  # print statements.
    "DTZ001", # Datetime objects without timezones.
    "DTZ007", # Datetime objects without timezones.
    "DTZ005", # More datetimes without timezones.
    "B008",   # FastAPI's Dependency Injection tools make function calls in arg defaults.
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party =["platformics"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.pytest.ini_options]
markers = [
    "asyncio",
]
