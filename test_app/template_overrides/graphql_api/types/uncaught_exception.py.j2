"""
Auto-generated by running `make codegen`. Do not edit!
Make changes to the template platformics/codegen/templates/graphql_api/types/class_name.py.j2 instead.

GraphQL type for UncaughtException
"""

# ruff: noqa: E501 Line too long


import typing
from typing import TYPE_CHECKING, Annotated, Any, Optional, Sequence, Callable, List

import platformics.database.models as base_db
from platformics.graphql_api.core.strawberry_helpers import get_aggregate_selections, get_nested_selected_fields
import database.models as db
import strawberry
import datetime
from platformics.graphql_api.core.query_builder import get_db_rows, get_aggregate_db_rows
from validators.uncaught_exception import UncaughtExceptionCreateInputValidator
from graphql_api.helpers.uncaught_exception import (
    UncaughtExceptionGroupByOptions,
    build_uncaught_exception_groupby_output,
)
from platformics.graphql_api.core.relay_interface import EntityInterface
from fastapi import Depends
from platformics.graphql_api.core.errors import PlatformicsError
from platformics.graphql_api.core.deps import get_authz_client, get_db_session, require_auth_principal, is_system_user
from platformics.graphql_api.core.query_input_types import (
    aggregator_map,
    orderBy,
    EnumComparators,
    DatetimeComparators,
    IntComparators,
    FloatComparators,
    StrComparators,
    UUIDComparators,
    BoolComparators,
)
from platformics.graphql_api.core.strawberry_extensions import DependencyExtension
from platformics.security.authorization import AuthzAction, AuthzClient, Principal
from sqlalchemy import inspect
from sqlalchemy.engine.row import RowMapping
from sqlalchemy.ext.asyncio import AsyncSession
from strawberry import relay
from strawberry.types import Info
from support.limit_offset import LimitOffsetClause
from typing_extensions import TypedDict
import enum


E = typing.TypeVar("E")
T = typing.TypeVar("T")

if TYPE_CHECKING:
    pass
else:
    pass


"""
------------------------------------------------------------------------------
Dataloaders
------------------------------------------------------------------------------
These are batching functions for loading related objects to avoid N+1 queries.
"""


"""
------------------------------------------------------------------------------
Define Strawberry GQL types
------------------------------------------------------------------------------
"""

"""
Only let users specify IDs in WHERE clause when mutating data (for safety).
We can extend that list as we gather more use cases from the FE team.
"""


@strawberry.input
class UncaughtExceptionWhereClauseMutations(TypedDict):
    id: IntComparators | None


"""
Supported WHERE clause attributes
"""


@strawberry.input
class UncaughtExceptionWhereClause(TypedDict):
    name: Optional[StrComparators] | None
    id: Optional[IntComparators] | None
    owner_user_id: Optional[IntComparators] | None
    collection_id: Optional[IntComparators] | None


"""
Supported ORDER BY clause attributes
"""


@strawberry.input
class UncaughtExceptionOrderByClause(TypedDict):
    name: Optional[orderBy] | None
    id: Optional[orderBy] | None
    owner_user_id: Optional[orderBy] | None
    collection_id: Optional[orderBy] | None


"""
Define UncaughtException type
"""


@strawberry.type(description=None)
class UncaughtException(EntityInterface):
    name: str = strawberry.field(description=None)
    id: int = strawberry.field(description="Numeric identifier")
    owner_user_id: int = strawberry.field(description=None)
    collection_id: int = strawberry.field(description=None)


"""
We need to add this to each Queryable type so that strawberry will accept either our
Strawberry type *or* a SQLAlchemy model instance as a valid response class from a resolver
"""
UncaughtException.__strawberry_definition__.is_type_of = (  # type: ignore
    lambda obj, info: type(obj) == db.UncaughtException or type(obj) == UncaughtException
)

"""
------------------------------------------------------------------------------
Aggregation types
------------------------------------------------------------------------------
"""
"""
Define columns that support numerical aggregations
"""


@strawberry.type
class UncaughtExceptionNumericalColumns:
    id: Optional[int] = None
    owner_user_id: Optional[int] = None
    collection_id: Optional[int] = None


"""
Define columns that support min/max aggregations
"""


@strawberry.type
class UncaughtExceptionMinMaxColumns:
    name: Optional[str] = None
    id: Optional[int] = None
    owner_user_id: Optional[int] = None
    collection_id: Optional[int] = None


"""
Define enum of all columns to support count and count(distinct) aggregations
"""


@strawberry.enum
class UncaughtExceptionCountColumns(enum.Enum):
    name = "name"
    id = "id"
    ownerUserId = "owner_user_id"
    collectionId = "collection_id"


"""
Support *filtering* on aggregates and related aggregates
"""


@strawberry.input
class UncaughtExceptionAggregateWhereClauseCount(TypedDict):
    arguments: Optional["UncaughtExceptionCountColumns"] | None
    distinct: Optional[bool] | None
    filter: Optional[UncaughtExceptionWhereClause] | None
    predicate: Optional[IntComparators] | None


@strawberry.input
class UncaughtExceptionAggregateWhereClause(TypedDict):
    count: UncaughtExceptionAggregateWhereClauseCount


"""
All supported aggregation functions
"""


@strawberry.type
class UncaughtExceptionAggregateFunctions:
    # This is a hack to accept "distinct" and "columns" as arguments to "count"
    @strawberry.field
    def count(
        self, distinct: Optional[bool] = False, columns: Optional[UncaughtExceptionCountColumns] = None
    ) -> Optional[int]:
        # Count gets set with the proper value in the resolver, so we just return it here
        return self.count  # type: ignore

    sum: Optional[UncaughtExceptionNumericalColumns] = None
    avg: Optional[UncaughtExceptionNumericalColumns] = None
    stddev: Optional[UncaughtExceptionNumericalColumns] = None
    variance: Optional[UncaughtExceptionNumericalColumns] = None
    min: Optional[UncaughtExceptionMinMaxColumns] = None
    max: Optional[UncaughtExceptionMinMaxColumns] = None
    groupBy: Optional[UncaughtExceptionGroupByOptions] = None


"""
Wrapper around UncaughtExceptionAggregateFunctions
"""


@strawberry.type
class UncaughtExceptionAggregate:
    aggregate: Optional[list[UncaughtExceptionAggregateFunctions]] = None


"""
------------------------------------------------------------------------------
Mutation types
------------------------------------------------------------------------------
"""


@strawberry.input()
class UncaughtExceptionCreateInput:
    name: str = strawberry.field(description=None)
    id: int = strawberry.field(description="Numeric identifier")
    owner_user_id: int = strawberry.field(description=None)
    collection_id: int = strawberry.field(description=None)


"""
------------------------------------------------------------------------------
Utilities
------------------------------------------------------------------------------
"""


@strawberry.field(extensions=[DependencyExtension()])
async def resolve_uncaught_exceptions(
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[UncaughtExceptionWhereClause] = None,
    order_by: Optional[list[UncaughtExceptionOrderByClause]] = [],
    limit_offset: Optional[LimitOffsetClause] = None,
) -> typing.Sequence[UncaughtException]:
    # INTENTIONALLY RAISING AN AttributeError!
    return where.nonexistent_attribute


def format_uncaught_exception_aggregate_output(
    query_results: Sequence[RowMapping] | RowMapping,
) -> UncaughtExceptionAggregate:
    """
    Given a row from the DB containing the results of an aggregate query,
    format the results using the proper GraphQL types.
    """
    aggregate = []
    if not type(query_results) is list:
        query_results = [query_results]  # type: ignore
    for row in query_results:
        aggregate.append(format_uncaught_exception_aggregate_row(row))
    return UncaughtExceptionAggregate(aggregate=aggregate)


def format_uncaught_exception_aggregate_row(row: RowMapping) -> UncaughtExceptionAggregateFunctions:
    """
    Given a single row from the DB containing the results of an aggregate query,
    format the results using the proper GraphQL types.
    """
    output = UncaughtExceptionAggregateFunctions()
    for key, value in row.items():
        # Key is either an aggregate function or a groupby key
        group_keys = key.split(".")
        aggregate = key.split("_", 1)
        if aggregate[0] not in aggregator_map.keys():
            # Turn list of groupby keys into nested objects
            if not getattr(output, "groupBy"):
                setattr(output, "groupBy", UncaughtExceptionGroupByOptions())
            group = build_uncaught_exception_groupby_output(getattr(output, "groupBy"), group_keys, value)
            setattr(output, "groupBy", group)
        else:
            aggregate_name = aggregate[0]
            if aggregate_name == "count":
                output.count = value
            else:
                aggregator_fn, col_name = aggregate[0], aggregate[1]
                if not getattr(output, aggregator_fn):
                    if aggregate_name in ["min", "max"]:
                        setattr(output, aggregator_fn, UncaughtExceptionMinMaxColumns())
                    else:
                        setattr(output, aggregator_fn, UncaughtExceptionNumericalColumns())
                setattr(getattr(output, aggregator_fn), col_name, value)
    return output


@strawberry.field(extensions=[DependencyExtension()])
async def resolve_uncaught_exceptions_aggregate(
    info: Info,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[UncaughtExceptionWhereClause] = None,
    # TODO: add support for groupby, limit/offset
) -> UncaughtExceptionAggregate:
    """
    Aggregate values for UncaughtException objects. Used for queries (see graphql_api/queries.py).
    """
    # Get the selected aggregate functions and columns to operate on, and groupby options if any were provided.
    # TODO: not sure why selected_fields is a list
    aggregate_selections, groupby_selections = get_aggregate_selections(info.selected_fields)

    if not aggregate_selections:
        raise PlatformicsError("No aggregate functions selected")

    rows = await get_aggregate_db_rows(db.UncaughtException, session, authz_client, principal, where, aggregate_selections, [], groupby_selections)  # type: ignore
    aggregate_output = format_uncaught_exception_aggregate_output(rows)
    return aggregate_output


@strawberry.mutation(extensions=[DependencyExtension()])
async def create_uncaught_exception(
    input: UncaughtExceptionCreateInput,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
    is_system_user: bool = Depends(is_system_user),
) -> db.UncaughtException:
    """
    Create a new UncaughtException object. Used for mutations (see graphql_api/mutations.py).
    """
    validated = UncaughtExceptionCreateInputValidator(**input.__dict__)
    params = validated.model_dump()

    # Validate that the user can read all of the entities they're linking to.

    # Validate that the user can read all of the entities they're linking to.

    # Save to DB
    params["owner_user_id"] = int(principal.id)
    new_entity = db.UncaughtException(**params)

    # Are we actually allowed to create this entity?
    if not authz_client.can_create(new_entity, principal):
        raise PlatformicsError("Unauthorized: Cannot create entity")

    session.add(new_entity)
    await session.commit()
    return new_entity


@strawberry.mutation(extensions=[DependencyExtension()])
async def delete_uncaught_exception(
    where: UncaughtExceptionWhereClauseMutations,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
) -> Sequence[db.UncaughtException]:
    """
    Delete UncaughtException objects. Used for mutations (see graphql_api/mutations.py).
    """
    # Fetch entities for deletion, if we have access to them
    entities = await get_db_rows(db.UncaughtException, session, authz_client, principal, where, [], AuthzAction.DELETE)
    if len(entities) == 0:
        raise PlatformicsError("Unauthorized: Cannot delete entities")

    # Update DB
    for entity in entities:
        await session.delete(entity)
    await session.commit()
    return entities
